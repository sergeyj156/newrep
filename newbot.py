import asyncio
import aiosqlite
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.callback_data import CallbackData
from aiogram.utils.exceptions import MessageToDeleteNotFound
from aiogram.dispatcher import FSMContext
from openpyxl import Workbook
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram import types
from aiogram.dispatcher.filters import Text

class PostState(StatesGroup):
    WAITING_FOR_POST = State()

from aiogram.dispatcher.filters.state import State, StatesGroup





ADMIN_ID = 679030634  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

def is_admin(user_id):
    return user_id == ADMIN_ID

API_TOKEN = '7033678803:AAFgvv-6M1yRr_iJAgQDiN6C5lpYjMfNIoc'
async def set_webhook():
    await bot.set_webhook(url="")


bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())

callback_data = CallbackData('menu', 'item')
last_messages = []

async def create_db():
    async with aiosqlite.connect('users_activity.db') as db:
        await db.execute("PRAGMA foreign_keys = ON")
        await db.execute('''CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER NOT NULL UNIQUE, username TEXT, balance INTEGER DEFAULT 0)''')
        await db.execute('''CREATE TABLE IF NOT EXISTS activities (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER NOT NULL, type TEXT NOT NULL, count INTEGER DEFAULT 0, FOREIGN KEY(user_id) REFERENCES users(user_id))''')
        await db.execute('''CREATE TABLE IF NOT EXISTS code_words (id INTEGER PRIMARY KEY AUTOINCREMENT, word TEXT NOT NULL UNIQUE, points INTEGER DEFAULT 0)''')
        await db.commit()

async def get_user_balance(user_id: int) -> int:
    async with aiosqlite.connect('users_activity.db') as db:
        async with db.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,)) as cursor:
            row = await cursor.fetchone()
            return row[0] if row else 0

async def show_main_menu(chat_id):
    keyboard_markup = InlineKeyboardMarkup(row_width=1)
    btns_text = ['–ü—Ä–∞–≤–∏–ª–∞', '–ö–∞–Ω–∞–ª—ã –∏ —á–∞—Ç—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è', '–ú–æ–∏ –±–∞–ª–ª—ã', '–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª—ã', '–†–µ–π—Ç–∏–Ω–≥', '–ê—á–∏–≤–∫–∏', '–ü–æ–º–æ—â—å']
    for text in btns_text:
        keyboard_markup.add(InlineKeyboardButton(text, callback_data=callback_data.new(item=text.replace(" ", "_").lower())))
    photo_path = '/Users/sergejavkin/PycharmProjects/–ü—Ä–æ–±–Ω—ã–π –±–æ—Ç/100–ë/privet.jpg'
    with open(photo_path, 'rb') as photo:
        await bot.send_photo(chat_id, photo, caption="–ü—Ä–∏–≤–µ—Ç! –¢—ã –ø–æ–ø–∞–ª –≤ –º–µ–Ω—é –±–æ—Ç–∞ 100–±–∞–ª–ª—å–Ω–æ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ üòé \n\n–°–æ–±—Ä–∞–ª–∏ –∑–¥–µ—Å—å –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, —á—Ç–æ–±—ã —Ç—ã –±—ã—Å—Ç—Ä–æ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –≥–æ–Ω–∫–µ –∑–∞ –±–∞–ª–ª–∞–º–∏ –∏ —Å–º–æ–≥ –æ—Ç—Å–ª–µ–¥–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –º–µ—Å—è—Ü.", reply_markup=keyboard_markup)

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await add_or_update_user(user_id, username)
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_main_menu(message.from_user.id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async def add_or_update_user(user_id: int, username: str):
    async with aiosqlite.connect('users_activity.db') as db:
        await db.execute('''INSERT INTO users (user_id, username) VALUES (?, ?)
                            ON CONFLICT(user_id) DO UPDATE SET username=excluded.username''',
                         (user_id, username))
        await db.commit()


from io import BytesIO
from aiogram.types import InputMediaPhoto
last_messages = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è message_id –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π

@dp.callback_query_handler(callback_data.filter(item='–ø—Ä–∞–≤–∏–ª–∞'))
async def show_rules(call: types.CallbackQuery):
    global last_messages
    last_messages.clear()
    photo_paths = [
        '/Users/sergejavkin/PycharmProjects/–ü—Ä–æ–±–Ω—ã–π –±–æ—Ç/100–ë/pervay.jpg',
        '/Users/sergejavkin/PycharmProjects/–ü—Ä–æ–±–Ω—ã–π –±–æ—Ç/100–ë/vtoroy.jpg',
        '/Users/sergejavkin/PycharmProjects/–ü—Ä–æ–±–Ω—ã–π –±–æ—Ç/100–ë/treriy.jpg',
        '/Users/sergejavkin/PycharmProjects/–ü—Ä–æ–±–Ω—ã–π –±–æ—Ç/100–ë/chet.jpg',
        '/Users/sergejavkin/PycharmProjects/–ü—Ä–æ–±–Ω—ã–π –±–æ—Ç/100–ë/pyt.jpg',
        '/Users/sergejavkin/PycharmProjects/–ü—Ä–æ–±–Ω—ã–π –±–æ—Ç/100–ë/six.jpg',
    ]

    media = [InputMediaPhoto(open(photo_path, 'rb')) for photo_path in photo_paths]
    media_messages = await bot.send_media_group(chat_id=call.message.chat.id, media=media)
    for msg in media_messages:
        last_messages.append(msg.message_id)

    rules_text = "–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏ –∫–∞—Ä—Ç–æ—á–∫–∏, —á—Ç–æ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∏—á–µ–≥–æ –≤–∞–∂–Ω–æ–≥–æ! –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏ –≤ —Ä–∞–∑–¥–µ–ª ¬´–ø–æ–º–æ—â—å¬ª. –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∏ –ø–æ–º–æ–∂–µ—Ç —Å–æ –≤—Å–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è ‚ù§"
    rules_message = await call.message.answer(rules_text, reply_markup=InlineKeyboardMarkup().add(
        InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='menu:back_to_menu')))
    last_messages.append(rules_message.message_id)

@dp.callback_query_handler(callback_data.filter(item='back_to_menu'))
async def back_to_menu(call: types.CallbackQuery):
    for msg_id in last_messages:
        try:
            await bot.delete_message(chat_id=call.message.chat.id, message_id=msg_id)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
    last_messages.clear()  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫, —Ç.–∫. –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã
    await show_main_menu(call.from_user.id)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é



@dp.callback_query_handler(callback_data.filter(item='–º–æ–∏_–±–∞–ª–ª—ã'))
async def show_my_points(call: types.CallbackQuery):
    await call.message.delete()
    balance = await get_user_balance(call.from_user.id)
    message = f'–£—Ö-—Ç—ã! –ù–∞ —Ç–≤–æ—ë–º —Å—á–µ—Ç—É —É–∂–µ {balance} –±–∞–ª–ª–æ–≤ üòâ\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ, —á—Ç–æ–±—ã –≤ –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ø–æ–≤—ã–π –ø—Ä–∏–∑.' if balance > 0 else '–û–π, —É —Ç–µ–±—è –ø–æ–∫–∞ 0 –±–∞–ª–ª–æ–≤...\n\n–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –∫–ª–∏–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–∫–∞–Ω–∞–ª –∏ —á–∞—Ç—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è¬ª.'
    await call.message.answer(message, reply_markup=InlineKeyboardMarkup(row_width=1).add(InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data=callback_data.new(item='back_to_menu'))))

@dp.callback_query_handler(callback_data.filter(item='–ø–æ–ª—É—á–∏—Ç—å_–±–∞–ª–ª—ã'))
async def earn_points(call: types.CallbackQuery):
    await call.message.delete()
    points_markup = InlineKeyboardMarkup(row_width=1)
    buttons = [
        InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥–æ–≤–æ–µ", callback_data='send_code'),
        InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç", callback_data='send_post'),
        InlineKeyboardButton("–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", callback_data='invite_friend'),
        InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data='menu:back_to_menu')
    ]
    points_markup.add(*buttons)
    await call.message.answer("–í—ã–±–µ—Ä–∏, –∫–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞–ª–ª—ã:", reply_markup=points_markup)




@dp.callback_query_handler(callback_data.filter(item='back_to_menu'))
async def back_to_menu(call: types.CallbackQuery):
    global last_messages
    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –≤–∫–ª—é—á–∞—è —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
    for msg_id in last_messages:
        try:
            await bot.delete_message(chat_id=call.message.chat.id, message_id=msg_id)
        except MessageToDeleteNotFound:
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {msg_id}")
    last_messages.clear()

    # –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏, —Å –∫–æ—Ç–æ—Ä–æ–π –±—ã–ª –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –≤—ã–∑–æ–≤
    try:
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    except MessageToDeleteNotFound:
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {call.message.message_id}")

    # –ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    await show_main_menu(call.from_user.id)


@dp.message_handler(commands=['admin'])
async def admin_menu(message: types.Message):
    if is_admin(message.from_user.id):
        await show_admin_menu(message.chat.id)
    else:
        await message.reply("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")

async def show_admin_menu(chat_id):
    admin_markup = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ", callback_data='admin:add_code'),
        InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ", callback_data='admin:delete_code'),
        InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–¥–æ–≤—ã–µ —Å–ª–æ–≤–∞", callback_data='admin:show_codes'),
        InlineKeyboardButton("–í—ã–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data='admin:export_users')
    ]
    admin_markup.add(*buttons)
    await bot.send_message(chat_id, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=admin_markup)

from aiogram.dispatcher.filters.state import State, StatesGroup

class AdminCodeState(StatesGroup):
    waiting_for_code_word = State()
    waiting_for_code_word_input = State() # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∞–ª–ª–æ–≤

@dp.callback_query_handler(lambda c: c.data == 'admin:add_code', state=None)
async def admin_add_code_start(call: types.CallbackQuery):
    if call.from_user.id == ADMIN_ID:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        await AdminCodeState.waiting_for_code_word.set()
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
    else:
        await call.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)


@dp.message_handler(state=AdminCodeState.waiting_for_code_word)
async def admin_add_code_finish(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['code_word'] = message.text.split()[0]  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ
        data['points'] = message.text.split()[1]  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤

    # –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∞–ª–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    async with aiosqlite.connect('users_activity.db') as db:
        await db.execute("INSERT INTO code_words (word, points) VALUES (?, ?)",
                         (data['code_word'], int(data['points'])))
        await db.commit()

    await message.answer(f"–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ '{data['code_word']}' —Å {data['points']} –±–∞–ª–ª–∞–º–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
    await state.finish()  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è

@dp.callback_query_handler(lambda c: c.data == 'admin:show_codes', user_id=ADMIN_ID)
async def admin_show_codes(call: types.CallbackQuery):
    async with aiosqlite.connect('users_activity.db') as db:  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
        cursor = await db.execute("SELECT word, points FROM code_words")
        codes_data = await cursor.fetchall()
        if codes_data:
            codes_list = "\n".join([f"{word} - {points} –±–∞–ª–ª(–æ–≤)" for word, points in codes_data])
            await call.message.answer(f"–ö–æ–¥–æ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –±–∞–ª–ª—ã:\n{codes_list}")
        else:
            await call.message.answer("–°–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤—ã—Ö —Å–ª–æ–≤ –ø—É—Å—Ç.")


class AdminCodeState(StatesGroup):
    waiting_for_code_word = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∞–ª–ª–æ–≤
    waiting_for_code_word_to_delete = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

@dp.message_handler(state=AdminCodeState.waiting_for_code_word_to_delete)
async def delete_code_word(message: types.Message, state: FSMContext):
    code_word_to_delete = message.text.strip()
    async with aiosqlite.connect('users_activity.db') as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor = await db.execute("SELECT id FROM code_words WHERE word = ?", (code_word_to_delete,))
        if await cursor.fetchone() is not None:
            # –£–¥–∞–ª—è–µ–º –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–∞–π–¥–µ–Ω–æ
            await db.execute("DELETE FROM code_words WHERE word = ?", (code_word_to_delete,))
            await db.commit()
            await message.answer(f"–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ '{code_word_to_delete}' –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
        else:
            await message.answer(f"–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ '{code_word_to_delete}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'admin:delete_code', user_id=ADMIN_ID)
async def prompt_code_word_deletion(call: types.CallbackQuery):
    await AdminCodeState.waiting_for_code_word_to_delete.set()
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:")

async def export_users_to_excel():
    async with aiosqlite.connect('users_activity.db') as db:
        cursor = await db.execute("SELECT user_id, username, balance FROM users")
        users_data = await cursor.fetchall()

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–∏–≥—É Excel
    wb = Workbook()
    ws = wb.active
    ws.title = "Users Data"

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
    ws.append(["User ID", "Username", "Balance"])

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    for user in users_data:
        ws.append(user)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    filename = "users_data.xlsx"
    wb.save(filename)

    return filename

@dp.callback_query_handler(lambda c: c.data == 'admin:export_users', user_id=ADMIN_ID)
async def admin_export_users(call: types.CallbackQuery):
    filename = await export_users_to_excel()
    with open(filename, "rb") as file:
        await bot.send_document(call.message.chat.id, document=file, caption="–î–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")

class UserAction(StatesGroup):
    waiting_for_code_word_input = State()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
@dp.callback_query_handler(lambda c: c.data == 'send_code', state='*')
async def prompt_for_code_word(call: types.CallbackQuery):
    await (UserAction.waiting_for_code_word_input.set())
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
@dp.message_handler(state=UserAction.waiting_for_code_word_input)
async def process_code_word_input(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username
    code_word_input = message.text.strip().lower()



    async with aiosqlite.connect('users_activity.db') as db:
        cursor = await db.execute("SELECT points FROM code_words WHERE LOWER(word) = ?", (code_word_input,))
        result = await cursor.fetchone()
        if result:
            points = result[0]
            try:
                await db.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (points, user_id))
                await db.commit()
                await message.answer(f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {points} –±–∞–ª–ª(–æ–≤) –∑–∞ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ '{code_word_input}'.")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            await message.answer("–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    await state.finish()

@dp.message_handler(lambda message: '#–ø–æ–º–æ—â—å' in message.text)
async def hashtag_help_handler(message: types.Message):
    user_id = message.from_user.id
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await add_or_update_user_balance(user_id, 10)  # –î–æ–±–∞–≤–ª—è–µ–º 10 –±–∞–ª–ª–æ–≤ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å #–ø–æ–º–æ—â—å
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤
    await message.reply("–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 10 –±–∞–ª–ª–æ–≤ –∑–∞ –ø–æ–º–æ—â—å!")

async def add_or_update_user_balance(user_id: int, points: int):
    async with aiosqlite.connect('users_activity.db') as db:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤
        await db.execute('''INSERT INTO users (user_id, balance) VALUES (?, ?)
                            ON CONFLICT(user_id) DO UPDATE SET balance = balance + excluded.balance''',
                         (user_id, points))
        await db.commit()

@dp.callback_query_handler(text='send_post')  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ —Å callback_data='send_post'
async def handle_send_post(call: types.CallbackQuery):
    await PostState.WAITING_FOR_POST.set()
    await call.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –ø–æ—Å—Ç —Å —Ö–µ—à—Ç–µ–≥–æ–º #100–±–∞–ª–ª—å–Ω—ã–π—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä.")

@dp.message_handler(state=PostState.WAITING_FOR_POST)
async def process_post(message: types.Message, state: FSMContext):
    if '#100–±–∞–ª–ª—å–Ω—ã–π—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä' in message.text:
        user_id = message.from_user.id
        await add_or_update_user_balance(user_id, 150)  # –î–æ–±–∞–≤–ª—è–µ–º 150 –±–∞–ª–ª–æ–≤
        await message.answer("–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 150 –±–∞–ª–ª–æ–≤ –∑–∞ –ø–æ—Å—Ç —Å —Ö–µ—à—Ç–µ–≥–æ–º #100–±–∞–ª–ª—å–Ω—ã–π—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä!")
    else:
        await message.answer("–í –≤–∞—à–µ–º –ø–æ—Å—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω —Ö–µ—à—Ç–µ–≥ #100–±–∞–ª–ª—å–Ω—ã–π—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    await state.finish()  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞

@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def count_messages(message: types.Message):
    user_id = message.from_user.id
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    await add_or_update_user_balance(user_id, 1)  # –î–æ–±–∞–≤–ª—è–µ–º 1 –±–∞–ª–ª –∑–∞ –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö)
    # await message.reply("–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω 1 –±–∞–ª–ª –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
async def add_or_update_user_balance(user_id: int, points: int):
    async with aiosqlite.connect('users_activity.db') as db:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤
        await db.execute('''INSERT INTO users (user_id, balance) VALUES (?, ?)
                            ON CONFLICT(user_id) DO UPDATE SET balance = balance + excluded.balance''',
                         (user_id, points))
        await db.commit()





@dp.callback_query_handler(callback_data.filter(item='–∞—á–∏–≤–∫–∏'))
async def show_achievements(call: types.CallbackQuery):
    await call.message.delete()
    message="–ü—Ä–∏–≤–µ—Ç! –í —ç—Ç–æ—Ç —Ä–∞–∑ —Ç—ã –Ω–µ –Ω–∞–±—Ä–∞–ª –±–∞–ª–ª—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞ üò¢ –ñ–¥—ë–º —Ç–µ–±—è –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ –≤ —á–∏—Å–ª–µ —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö!"
    await call.message.answer(message, reply_markup=InlineKeyboardMarkup(row_width=1).add(InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data=callback_data.new(item='back_to_menu'))))

from aiogram.dispatcher.filters.state import StatesGroup, State

class HelpState(StatesGroup):
    WAITING_FOR_PROBLEM_DESCRIPTION = State()

@dp.callback_query_handler(callback_data.filter(item='–ø–æ–º–æ—â—å'))
async def request_help(call: types.CallbackQuery):
    await HelpState.WAITING_FOR_PROBLEM_DESCRIPTION.set()
    await call.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É, —á—Ç–æ–±—ã –º–µ–Ω–µ–¥–∂–µ—Ä –±—ã—Å—Ç—Ä–µ–µ –Ω–∞—à—ë–ª —Ä–µ—à–µ–Ω–∏–µ.")


@dp.message_handler(state=HelpState.WAITING_FOR_PROBLEM_DESCRIPTION, content_types=types.ContentTypes.TEXT)
async def handle_problem_description(message: types.Message, state: FSMContext):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã –∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.send_message(ADMIN_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} ({message.from_user.id}) "
                                     f"–∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å:\n\n{message.text}")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    back_button = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data=callback_data.new(item='back_to_menu')))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–æ–π "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∏ –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è ü§ì", reply_markup=back_button)

    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

from aiogram import types
from aiogram.dispatcher.filters import Text

@dp.callback_query_handler(callback_data.filter(item='—Ä–µ–π—Ç–∏–Ω–≥'))
async def show_rating(callback_query: types.CallbackQuery):
    await callback_query.answer()  # –û—Ç–≤–µ—Ç –Ω–∞ callback_query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Telegram
    await send_rating(callback_query.message.chat.id)


from datetime import datetime


async def send_rating(chat_id):
    try:
        async with aiosqlite.connect('users_activity.db') as db:  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            query = 'SELECT username, balance FROM users ORDER BY balance DESC LIMIT 10'
            async with db.execute(query) as cursor:
                rows = await cursor.fetchall()

                if not rows:
                    await bot.send_message(chat_id, "–†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç.")
                    return

                rating_message = "–†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ " + datetime.now().strftime("%Y-%m-%d") + ":\n\n"
                for index, (username, balance) in enumerate(rows, start=1):
                    rating_message += f"{index}. {username if username else '–ê–Ω–æ–Ω–∏–º'}: {balance} –±–∞–ª–ª–æ–≤\n"

                await bot.send_message(chat_id, rating_message)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")
        await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥.")

@dp.callback_query_handler(Text(equals="invite_friend"))
async def invite_friend(call: types.CallbackQuery):
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    invite_link = f'https://t.me/tutor_100ballniy_bot?start={call.from_user.id}'
    await call.message.answer(f'–û—Ç–ø—Ä–∞–≤—å —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º: {invite_link}\n–ï—Å–ª–∏ –¥—Ä—É–≥ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –∏ –æ—Å—Ç–∞–µ—Ç—Å—è —Å –Ω–∞–º–∏ 3 –¥–Ω—è, –≤—ã –æ–±–∞ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ 100 –±–∞–ª–ª–æ–≤!')

async def check_referrals():
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (–∑–∞–ø—É—Å–∫–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–∑ –≤ –¥–µ–Ω—å)
    async with aiosqlite.connect('users_activity.db') as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫—Ç–æ –±—ã–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω –±–æ–ª–µ–µ 3 –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –∏ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∏–ª –±–∞–ª–ª—ã
        cursor = await db.execute('''SELECT user_id, referred_by FROM users 
                                     WHERE referral_time <= datetime('now', '-3 day') AND balance_earned = 0''')
        referrals = await cursor.fetchall()
        for user_id, referrer_id in referrals:
            # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            await db.execute('UPDATE users SET balance = balance + 100 WHERE user_id IN (?, ?)', (user_id, referrer_id))
            await db.execute('UPDATE users SET balance_earned = 1 WHERE user_id = ?', (user_id,))
            await db.commit()
            # –û–ø–æ–≤–µ—â–∞–µ–º –æ–± —É—Å–ø–µ—Ö–µ
            await bot.send_message(referrer_id, f'–¢–≤–æ–π –¥—Ä—É–≥ –æ—Å—Ç–∞–ª—Å—è —Å –Ω–∞–º–∏ –±–æ–ª–µ–µ 3 –¥–Ω–µ–π! –í–∞–º –æ–±–æ–∏–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ –ø–æ 100 –±–∞–ª–ª–æ–≤.')

InlineKeyboardButton("–ö–∞–Ω–∞–ª—ã –∏ —á–∞—Ç—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è", callback_data=callback_data.new(item='–∫–∞–Ω–∞–ª—ã_–∏_—á–∞—Ç—ã_–¥–ª—è_—É—á–∞—Å—Ç–∏—è'))

@dp.callback_query_handler(callback_data.filter(item='–∫–∞–Ω–∞–ª—ã_–∏_—á–∞—Ç—ã_–¥–ª—è_—É—á–∞—Å—Ç–∏—è'))
async def join_channels_and_chats(call: types.CallbackQuery):
    message_text = "–í —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –∏ —á–∞—Ç–µ –º—ã –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å üëá\n\n–°–∫–æ—Ä–µ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è!"
    join_button_url = "https://t.me/addlist/MEcHZ58uECw0MWQy"
    keyboard_markup = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton(text="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", url=join_button_url),
        InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data=callback_data.new(item='back_to_menu'))
    )
    await call.message.answer(message_text, reply_markup=keyboard_markup)

async def main():
    await create_db()
    await dp.start_polling()
    loop = asyncio.get_running_loop()
    loop.create_task(check_referrals())
    await dp.start_polling()


if __name__ == '__main__':
    asyncio.run(main())

if __name__ == '__main__':
    asyncio.run(main())
